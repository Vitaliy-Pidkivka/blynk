{"version":3,"sources":["components/Items/Items.module.scss","components/Items/Item/Item.module.scss","components/Comments/Comments.module.scss","components/Comments/Comment/Comment.module.scss","components/Sidebar/Sidebar.module.scss","components/Sidebar/Sidebar.js","components/Items/Item/Item.js","components/Items/Items.js","redux/appReducer.js","components/Comments/Comment/Comment.js","components/Comments/Comments.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["module","exports","Sidebar","className","styles","sidebar","Item","name","comments","isActive","removeItem","id","toggleItem","item","onClick","item__name","item__counter","length","Button","variant","color","size","Items","items","setNewItemName","addItem","newItemName","useState","isEmpty","setIsEmpty","type","placeholder","onChange","e","currentTarget","value","error","onKeyPress","ctrlKey","items__list","map","key","ADD_ITEM","initialState","background","newItemId","appReducer","state","action","newItem","filter","itemId","commentId","comment","commentName","Comment","removeComment","changeComment","isEditName","setIsEditName","style","backgroundColor","comment__name","onDoubleClick","autoFocus","onBlur","Comments","addComment","newCommentName","setNewCommentName","newCommentBackground","setNewCommentBackground","comments__list","connect","app","Boolean","window","location","hostname","match","reducers","combineReducers","store","applyMiddleware","save","namespace","thunkMiddleWare","createStore","createStoreWithMiddleware","load","__store__","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.008b465e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"items\":\"Items_items__3UOdZ\",\"items__input-group\":\"Items_items__input-group__1Uoj5\",\"items__list\":\"Items_items__list__3wivX\",\"error\":\"Items_error__wDaCz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Item_item__3WPOj\",\"isActive\":\"Item_isActive__3JY5O\",\"item__counter\":\"Item_item__counter__2OCHZ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__3rY5_\",\"comments__input-group\":\"Comments_comments__input-group__1gk0K\",\"comments__list\":\"Comments_comments__list__2MfTa\",\"error\":\"Comments_error__3JZOz\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comment\":\"Comment_comment__2jQRv\",\"comment__color-square\":\"Comment_comment__color-square__1c94O\",\"comment__name\":\"Comment_comment__name__1o9qr\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"sidebar\":\"Sidebar_sidebar__10aFz\"};","import React from 'react';\r\nimport styles from './Sidebar.module.scss'\r\n\r\nconst Sidebar = () => {\r\n    return (\r\n        <div className={styles.sidebar}>\r\n            <h1>Dayry App</h1>\r\n            <p>Comment with no sense</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Sidebar","import React from 'react';\r\nimport styles from './Item.module.scss'\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\n\r\nconst Item = ({name, comments, isActive, removeItem, id, toggleItem}) => {\r\n\r\n    const deleteItem = () => {\r\n        removeItem(id)\r\n    }\r\n\r\n    const activateItem = () => {\r\n        toggleItem(id)\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={`${styles.item} ${isActive && styles.isActive}`}\r\n            onClick={activateItem}\r\n        >\r\n        <span className={styles.item__name}>\r\n            {name}\r\n        </span>\r\n            <div>\r\n                <span className={styles.item__counter}>\r\n                    {comments.length}\r\n                </span>\r\n                <Button\r\n                    variant=\"outlined\"\r\n                    color=\"secondary\"\r\n                    size=\"small\"\r\n                    onClick={deleteItem}\r\n                >\r\n                    Remove\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n}\r\nexport default Item","import React, {useState} from 'react';\r\nimport styles from './Items.module.scss'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Item from \"./Item/Item\";\r\n\r\n\r\nconst Items = ({items, setNewItemName, addItem, newItemName, removeItem, toggleItem}) => {\r\n\r\n    const [isEmpty, setIsEmpty] = useState(false)\r\n\r\n    const onChangeInput = (e) => {\r\n        setNewItemName(e.currentTarget.value)\r\n        if (e.currentTarget.value !== '' && isEmpty) {\r\n            setIsEmpty(false)\r\n        }\r\n    }\r\n\r\n    const addNewItem = () => {\r\n        if (newItemName === '') {\r\n            setIsEmpty(true)\r\n        } else {\r\n            addItem()\r\n        }\r\n    }\r\n\r\n    const addNewItemWithKeyboard = (e) => {\r\n        if (e.ctrlKey) {\r\n            if (newItemName === '') {\r\n                setIsEmpty(true)\r\n            } else {\r\n                addItem()\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.items}>\r\n            <h2>Items</h2>\r\n            <div className={styles['items__input-group']}>\r\n                <input\r\n                    type=\"text\"\r\n                    placeholder='Type name here'\r\n                    onChange={onChangeInput}\r\n                    className={`${isEmpty && styles.error}`}\r\n                    value={newItemName}\r\n                    onKeyPress={addNewItemWithKeyboard}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={addNewItem}\r\n                >\r\n\r\n                    Add new\r\n                </Button>\r\n            </div>\r\n            <div className={styles.items__list}>\r\n                {items.map(item =>\r\n                    <Item\r\n                        {...item}\r\n                        key={item.id}\r\n                        removeItem={removeItem}\r\n                        toggleItem={toggleItem}\r\n                    />)}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Items","const SET_NEW_ITEM_NAME = \"blynk/app/SET-NEW-ITEM-NAME\";\r\nconst ADD_ITEM = \"blynk/app/ADD-ITEM\";\r\nconst REMOVE_ITEM = \"blynk/app/REMOVE-ITEM\";\r\nconst TOGGLE_ITEM = \"blynk/app/TOGGLE-ITEM\";\r\nconst ADD_COMMENT = \"blynk/app/ADD-COMMENT\";\r\nconst REMOVE_COMMENT = \"blynk/app/REMOVE-COMMENT\";\r\nconst CHANGE_COMMENT = \"blynk/app/CHANGE-COMMENT\";\r\n\r\n\r\nlet initialState = {\r\n    items: [\r\n        {\r\n            id: 0, name: 'item 1', comments: [\r\n                {\r\n                    id: 0,\r\n                    name: 'double click to change, lost focus to disable, press enter to set changes',\r\n                    background: '#333444'\r\n                },\r\n                {id: 1, name: 'second comment', background: '#333444'}\r\n            ], isActive: false\r\n        },\r\n        {id: 1, name: 'item 2', comments: [], isActive: false},\r\n        {id: 2, name: 'item 3', comments: [], isActive: false},\r\n    ],\r\n    newItemName: '',\r\n    newItemId: 0,\r\n}\r\n\r\nconst appReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case SET_NEW_ITEM_NAME: {\r\n            return {\r\n                ...state,\r\n                newItemName: action.name\r\n            }\r\n        }\r\n        case ADD_ITEM: {\r\n            let newItemId = state.newItemId\r\n            let newId = state.items.map(item => {\r\n                if (item.id > newItemId) {\r\n                    newItemId = item.id\r\n                    return null\r\n                }\r\n            })\r\n            let newItem = {id: newItemId + 1, name: state.newItemName, comments: [], isActive: false}\r\n            return {\r\n                ...state,\r\n                items: [...state.items, newItem],\r\n                newItemName: '',\r\n                newItemId: state.newItemId + 1\r\n            }\r\n        }\r\n        case REMOVE_ITEM: {\r\n            return {\r\n                ...state,\r\n                items: state.items.filter(item => item.id !== action.itemId)\r\n            }\r\n        }\r\n        case TOGGLE_ITEM: {\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if (item.id === action.itemId) {\r\n                        return {\r\n                            ...item,\r\n                            isActive: true\r\n                        }\r\n                    } else {\r\n                        return {\r\n                            ...item,\r\n                            isActive: false\r\n                        }\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case ADD_COMMENT: {\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if (item.id === action.itemId) {\r\n                        return {\r\n                            ...item,\r\n                            comments: [...item.comments, {\r\n                                id: action.commentId,\r\n                                name: action.name,\r\n                                background: action.background\r\n                            }]\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case REMOVE_COMMENT: {\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if (item.id === action.itemId) {\r\n                        return {\r\n                            ...item,\r\n                            comments: item.comments.filter(item => item.id !== action.commentId)\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        case CHANGE_COMMENT: {\r\n            return {\r\n                ...state,\r\n                items: state.items.map(item => {\r\n                    if (item.id === action.itemId) {\r\n                        return {\r\n                            ...item,\r\n                            comments: item.comments.map(comment => {\r\n                                if (comment.id === action.commentId) {\r\n                                    return {\r\n                                        ...comment,\r\n                                        name: action.commentName\r\n                                    }\r\n                                } else {\r\n                                    return comment\r\n                                }\r\n                            })\r\n                        }\r\n                    } else {\r\n                        return item\r\n                    }\r\n                })\r\n            }\r\n        }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport const setNewItemName = (name) => ({type: SET_NEW_ITEM_NAME, name});\r\nexport const addItem = () => ({type: ADD_ITEM});\r\nexport const removeItem = (itemId) => ({type: REMOVE_ITEM, itemId});\r\nexport const toggleItem = (itemId) => ({type: TOGGLE_ITEM, itemId});\r\nexport const addComment = (itemId, commentId, name, background) => ({\r\n    type: ADD_COMMENT,\r\n    itemId,\r\n    commentId,\r\n    name,\r\n    background\r\n});\r\nexport const removeComment = (itemId, commentId) => ({type: REMOVE_COMMENT, itemId, commentId});\r\nexport const changeComment = (itemId, commentId, commentName) => ({\r\n    type: CHANGE_COMMENT,\r\n    itemId,\r\n    commentId,\r\n    commentName\r\n});\r\n//redux-thunk\r\n\r\n\r\nexport default appReducer;","import React, {useState} from 'react';\r\nimport styles from './Comment.module.scss'\r\n\r\nconst Comment = ({background, name, itemId, id, removeComment, changeComment}) => {\r\n\r\n    const [isEditName, setIsEditName] = useState(false);\r\n\r\n    const deleteComment = (e) => {\r\n        if (e.ctrlKey) {\r\n            removeComment(itemId, id)\r\n        }\r\n    }\r\n\r\n    const changeCommentName = () => {\r\n        setIsEditName(true)\r\n    }\r\n    const deactivateChangeComment = () => {\r\n        setIsEditName(false)\r\n    }\r\n\r\n    const setCommentName = (e) => {\r\n        if (e.key === 'Enter') {\r\n            changeComment(itemId, id, e.currentTarget.value)\r\n            setIsEditName(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div\r\n            className={styles.comment}\r\n            onClick={deleteComment}\r\n        >\r\n            <div\r\n                className={styles['comment__color-square']}\r\n                style={{backgroundColor: background}}\r\n            >\r\n                <span className='sr-only'>Empty tag</span>\r\n            </div>\r\n            <div\r\n                className={styles.comment__name}\r\n                onDoubleClick={changeCommentName}\r\n            >\r\n                {isEditName && <input\r\n                    type=\"text\"\r\n                    placeholder={name}\r\n                    autoFocus={true}\r\n                    onKeyPress={setCommentName}\r\n                    onBlur={deactivateChangeComment}\r\n                />}\r\n                {!isEditName && name}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Comment","import React, {useState} from 'react';\r\nimport styles from './Comments.module.scss'\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Comment from \"./Comment/Comment\";\r\n\r\n\r\nconst Comments = ({comments, addComment, removeComment, itemId, changeComment}) => {\r\n\r\n    const [newCommentName, setNewCommentName] = useState('');\r\n    const [newCommentBackground, setNewCommentBackground] = useState('#000000');\r\n    const [isEmpty, setIsEmpty] = useState(false)\r\n\r\n    const onChangeInput = (e) => {\r\n        setNewCommentName(e.currentTarget.value)\r\n        if (e.currentTarget.value !== '' && isEmpty) {\r\n            setIsEmpty(false)\r\n        }\r\n    }\r\n    const onChangeColorInput = (e) => {\r\n        setNewCommentBackground(e.currentTarget.value)\r\n    }\r\n\r\n    const addNewComment = () => {\r\n        if (newCommentName === '') {\r\n            setIsEmpty(true)\r\n        } else {\r\n            let commentId = 0;\r\n            let id = comments.map(comment => {\r\n                if (comment.id > commentId) {\r\n                    commentId = commentId + 1\r\n                    return null\r\n                }\r\n            })\r\n            addComment(itemId, commentId + 1, newCommentName, newCommentBackground)\r\n            setNewCommentBackground('#000')\r\n            setNewCommentName('')\r\n        }\r\n    }\r\n\r\n    const addNewItemWithKeyboard = (e) => {\r\n        if (e.ctrlKey) {\r\n            if (newCommentName === '') {\r\n                setIsEmpty(true)\r\n            } else {\r\n                addComment()\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={styles.comments}>\r\n            <h2>Comments #{itemId + 1}</h2>\r\n            <div className={styles.comments__list}>\r\n                {comments.map(comment => (\r\n                    <Comment\r\n                        {...comment}\r\n                        key={comment.id}\r\n                        removeComment={removeComment}\r\n                        itemId={itemId}\r\n                        changeComment={changeComment}\r\n                    />\r\n                ))}\r\n            </div>\r\n            <div className={styles['comments__input-group']}>\r\n                <input\r\n                    type=\"color\"\r\n                    onChange={onChangeColorInput}\r\n                    value={newCommentBackground}\r\n                />\r\n                <textarea\r\n                    placeholder='Type comment here'\r\n                    onChange={onChangeInput}\r\n                    className={`${isEmpty && styles.error}`}\r\n                    value={newCommentName}\r\n                    onKeyPress={addNewItemWithKeyboard}\r\n                />\r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    size=\"small\"\r\n                    onClick={addNewComment}\r\n                >\r\n                    Add new\r\n                </Button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\nexport default Comments","import React from 'react';\nimport './App.css';\nimport Sidebar from \"./components/Sidebar/Sidebar\";\nimport Items from \"./components/Items/Items\";\nimport {connect} from \"react-redux\";\nimport {\n    addComment,\n    addItem,\n    changeComment,\n    removeComment,\n    removeItem,\n    setNewItemName,\n    toggleItem\n} from \"./redux/appReducer\";\nimport Comments from \"./components/Comments/Comments\";\n\nconst App = ({items, setNewItemName, addItem, newItemName,removeItem,\n    toggleItem,addComment, removeComment, changeComment}) => {\n    return (\n        <div className=\"App\">\n            <Sidebar/>\n            <div className=\"content\">\n                <Items items={items}\n                       setNewItemName={setNewItemName}\n                       addItem={addItem}\n                       newItemName={newItemName}\n                       removeItem={removeItem}\n                       toggleItem={toggleItem}\n                />\n                {items.map(item => {\n                    if(item.isActive){\n                        return  <Comments comments={item.comments}\n                                          itemId={item.id}\n                                          addComment={addComment}\n                                          key={item.id}\n                                          removeComment={removeComment}\n                                          changeComment={changeComment}\n                        />\n                    }\n                })}\n            </div>\n\n        </div>\n    );\n}\n\nconst mapStateToProps = (state) => ({\n    items: state.app.items,\n    newItemName: state.app.newItemName,\n})\nexport default connect(mapStateToProps, {setNewItemName, addItem, removeItem,\n    toggleItem, addComment, removeComment, changeComment})(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {applyMiddleware, combineReducers, createStore} from \"redux\";\r\nimport appReducer from \"./appReducer\";\r\nimport thunkMiddleWare from 'redux-thunk'\r\nimport {save, load} from \"redux-localstorage-simple\"\r\n\r\nconst reducers = combineReducers({\r\n    app: appReducer,\r\n})\r\n\r\nconst createStoreWithMiddleware = applyMiddleware(save({ namespace: \"blynk\"}), thunkMiddleWare)(createStore)\r\nconst store = createStoreWithMiddleware(reducers, load({ namespace: \"blynk\"}))\r\nwindow.__store__ = store\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}